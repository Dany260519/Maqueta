
Entiendo que deseas realizar un mapeo de los objetos en el array listButtons en React.js y mostrar los elementos title, links y button. Además, deseas que el botón se muestre como un enlace que, al hacer clic, muestre la lista de enlaces contenidos en secondObjects, y que también haya un enlace adicional para ocultar la lista y volver al estado anterior.

Aquí tienes cómo podrías hacerlo:

jsx
Copy code
import React, { useState } from "react";

const ListButtonsComponent = () => {
  const [showSecondObjects, setShowSecondObjects] = useState(false);

  const toggleSecondObjects = () => {
    setShowSecondObjects(!showSecondObjects);
  };

  return (
    <div>
      {listButtons.map((buttonData) => (
        <div key={buttonData.id}>
          <h2>{buttonData.title}</h2>
          <ul>
            {buttonData.links.map((link) => (
              <li key={link}>{link}</li>
            ))}
          </ul>
          {showSecondObjects ? (
            <div>
              <ul>
                {buttonData.secondObjects.map((secondObject, index) => (
                  <li key={index}>{secondObject}</li>
                ))}
              </ul>
              <a href="#" onClick={toggleSecondObjects}>
                {buttonData.seeLess}
              </a>
            </div>
          ) : (
            <a href="#" onClick={toggleSecondObjects}>
              {buttonData.button}
            </a>
          )}
        </div>
      ))}
    </div>
  );
};

export default ListButtonsComponent;
En este componente, hemos utilizado el estado showSecondObjects para controlar si se deben mostrar los elementos de secondObjects o no. El método toggleSecondObjects se encarga de alternar entre mostrar y ocultar estos elementos.

Dentro del mapeo, para cada elemento en listButtons, mostramos el título y la lista de enlaces en base al atributo links. Dependiendo del estado de showSecondObjects, mostramos el botón (enlace) "See All" o la lista completa de secondObjects, y en el caso de mostrar la lista completa, también se muestra el enlace "See Less" para ocultar los elementos adicionales.

Recuerda ajustar este código a tu estructura de componentes y lógica de renderizado existente en tu aplicación React.js


























Entiendo lo que estás buscando. Para lograr que solo uno de los botones "See All" o "See Less" se expanda y colapse a la vez, necesitas realizar un seguimiento del estado individual para cada objeto en el array `listButtons`. Puedes hacer esto creando un estado para cada objeto en el componente. Aquí tienes una manera de hacerlo:

```jsx
import React, { useState } from "react";

const ListButtonsComponent = () => {
  const [buttonStates, setButtonStates] = useState(
    listButtons.map(() => ({ showSecondObjects: false }))
  );

  const toggleSecondObjects = (index) => {
    const updatedStates = [...buttonStates];
    updatedStates[index].showSecondObjects = !updatedStates[index]
      .showSecondObjects;
    setButtonStates(updatedStates);
  };

  return (
    <div>
      {listButtons.map((buttonData, index) => (
        <div key={buttonData.id}>
          <h2>{buttonData.title}</h2>
          <ul>
            {buttonData.links.map((link) => (
              <li key={link}>{link}</li>
            ))}
          </ul>
          {buttonStates[index].showSecondObjects ? (
            <div>
              <ul>
                {buttonData.secondObjects.map((secondObject, idx) => (
                  <li key={idx}>{secondObject}</li>
                ))}
              </ul>
              <a href="#" onClick={() => toggleSecondObjects(index)}>
                {buttonData.seeLess}
              </a>
            </div>
          ) : (
            <a href="#" onClick={() => toggleSecondObjects(index)}>
              {buttonData.button}
            </a>
          )}
        </div>
      ))}
    </div>
  );
};

export default ListButtonsComponent;
```

En este código, hemos introducido un array `buttonStates` que realiza un seguimiento del estado de cada objeto en `listButtons`. Cada elemento en `buttonStates` contiene un campo `showSecondObjects` que controla si la lista de `secondObjects` está expandida o no para el objeto correspondiente.

Al hacer clic en un botón "See All" o "See Less", llamamos a la función `toggleSecondObjects` pasando el índice del objeto actual en el array. Dentro de esta función, actualizamos el estado `buttonStates` para el objeto específico que se está expandiendo o colapsando.

Esto debería lograr el comportamiento que buscas, donde solo uno de los botones se expande o colapsa a la vez.
















import React, { useState } from "react";

const ListButtonsComponent = () => {
  const [expandedId, setExpandedId] = useState(null);

  const toggleSecondObjects = (buttonId) => {
    if (expandedId === buttonId) {
      setExpandedId(null);
    } else {
      setExpandedId(buttonId);
    }
  };

  return (
    <div>
      {listButtons.map((buttonData) => (
        <div key={buttonData.id}>
          <h2>{buttonData.title}</h2>
          <ul>
            {buttonData.links.map((link) => (
              <li key={link}>{link}</li>
            ))}
          </ul>
          {expandedId === buttonData.id ? (
            <div>
              <ul>
                {buttonData.secondObjects.map((secondObject, index) => (
                  <li key={index}>{secondObject}</li>
                ))}
              </ul>
              <a href="#" onClick={() => toggleSecondObjects(buttonData.id)}>
                {buttonData.seeLess}
              </a>
            </div>
          ) : (
            <a href="#" onClick={() => toggleSecondObjects(buttonData.id)}>
              {buttonData.button}
            </a>
          )}
        </div>
      ))}
    </div>
  );
};

export default ListButtonsComponent;

En este código, hemos modificado la lógica para usar el estado expandedId para rastrear cuál de los elementos "See All" o "See Less" está expandido en un momento dado. Cuando haces clic en un enlace, la función toggleSecondObjects se llama con el id del elemento correspondiente y cambia el estado expandedId en consecuencia. Esto garantiza que solo el elemento en el que haces clic se expanda o colapse, mientras que los demás permanecen sin cambios.